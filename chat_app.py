import os
import sys
import time
import requests
import json
import streamlit as st
from langchain_community.embeddings import HuggingFaceEmbeddings
from qdrant_client import QdrantClient
from langchain_qdrant import QdrantVectorStore
from dotenv import load_dotenv
from data_processing import COLLECTION_NAME

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows + Streamlit + PyTorch
if sys.platform == "win32":
    os.environ['STREAMLIT_SERVER_FILE_WATCHER_TYPE'] = 'none'
    os.environ['TORCH_DISABLE_FILE_WATCHER'] = '1'
    os.environ['PYTHONASYNCIODEBUG'] = '0'

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
HF_TOKEN = os.getenv("HUGGINGFACEHUB_API_TOKEN")
if not HF_TOKEN:
    st.error("‚ùå –¢–æ–∫–µ–Ω Hugging Face –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    st.stop()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def setup_ui():
    st.set_page_config(layout="wide")
    st.markdown("""
    <style>
    .stApp {
        background-color: #0E1117;
        color: #FFFFFF;
    }
    .stChatInput input {
        background-color: #1E1E1E !important;
        color: #FFFFFF !important;
        border: 1px solid #3A3A3A !important;
    }
    .stChatMessage[data-testid="stChatMessage"]:nth-child(odd) {
        background-color: #1E1E1E !important;
        border: 1px solid #3A3A3A !important;
        color: #E0E0E0 !important;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
    }
    .stChatMessage[data-testid="stChatMessage"]:nth-child(even) {
        background-color: #2A2A2A !important;
        border: 1px solid #404040 !important;
        color: #F0F0F0 !important;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
    }
    .stChatMessage .avatar {
        background-color: #00FFAA !important;
        color: #000000 !important;
    }
    .stChatMessage p, .stChatMessage div {
        color: #FFFFFF !important;
    }
    h1, h2, h3 {
        color: #00FFAA !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("üìò AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –Ω–æ–≤—ã–º API")
    st.markdown("---")
    st.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–µ–π—à–µ–µ API Hugging Face Inference Providers")

class VectorSearch:
    def __init__(self):
        self.client = QdrantClient(
            host="localhost",
            port=6333,
            timeout=10,
            prefer_grpc=False
        )
        self.embeddings = HuggingFaceEmbeddings(
            model_name="ai-forever/ru-en-RoSBERTa",
            model_kwargs={'device': 'cpu'}
        )
        self.collection_name = COLLECTION_NAME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._check_collection()
        
    def _check_collection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π"""
        try:
            collections = self.client.get_collections()
            collection_names = [c.name for c in collections.collections]
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_names}")
            
            if self.collection_name not in collection_names:
                print(f"–û—à–∏–±–∫–∞: –ö–æ–ª–ª–µ–∫—Ü–∏—è {self.collection_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection_info = self.client.get_collection(self.collection_name)
            print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {self.collection_name}:")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {collection_info.vectors_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                points = self.client.scroll(
                    collection_name=self.collection_name,
                    limit=3,
                    with_vectors=False,
                    with_payload=True
                )
                
                print("\n–ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
                for i, point in enumerate(points[0], 1):
                    print(f"\n–î–æ–∫—É–º–µ–Ω—Ç {i}:")
                    print(f"ID: {point.id}")
                    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {point.payload}")
                    content = point.payload.get('page_content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
                    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:200]}..." if len(content) > 200 else f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content}")
                    
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {str(e)}")

    def search(self, query, k=5):
        """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            search_queries = [
                query,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                query.upper(),  # –í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä (–Ω–∞ —Å–ª—É—á–∞–π –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä)
                query.lower(),  # –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                query.replace('.', ' '),  # –ë–µ–∑ —Ç–æ—á–µ–∫
                query.replace(' ', '')     # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            ]
            
            # –•—Ä–∞–Ω–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            all_results = []
            seen_ids = set()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            for search_query in search_queries:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
                    query_vector = self.embeddings.embed_query(search_query)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ Qdrant
                    results = self.client.search(
                        collection_name=self.collection_name,
                        query_vector=query_vector,
                        limit=k,
                        with_payload=True,
                        with_vectors=False
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —É–¥–∞–ª—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã
                    for result in results:
                        if result.id not in seen_ids:
                            seen_ids.add(result.id)
                            all_results.append({
                                'id': result.id,
                                'score': result.score,
                                'payload': result.payload
                            })
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º '{search_query}': {str(e)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            all_results.sort(key=lambda x: x['score'], reverse=True)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\n–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}")
            for i, result in enumerate(all_results, 1):
                print(f"\n–î–æ–∫—É–º–µ–Ω—Ç {i} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {result['score']:.4f}):")
                print(f"ID: {result['id']}")
                print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result['payload']}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                text = result['payload'].get('text', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
                print(f"–¢–µ–∫—Å—Ç: {text[:500]}...")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return [doc['payload'] for doc in all_results]
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
            return []
            st.error(error_msg)
            import traceback
            traceback.print_exc()
            return []
            return []

class OllamaAssistant:
    def __init__(self):
        import requests
        import time
        
        self.base_url = "http://localhost:11434"
        self.api_url = f"{self.base_url}/api"
        self.model_name = "mistral"  # –ò–º—è –º–æ–¥–µ–ª–∏ –≤ Ollama
        self.headers = {'Content-Type': 'application/json'}
        self.max_retries = 3
        self.retry_delay = 5
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        for attempt in range(self.max_retries):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
                response = requests.get(
                    f"{self.api_url}/tags",
                    headers=self.headers,
                    timeout=10
                )
                
                if response.status_code == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
                    models = response.json().get('models', [])
                    model_exists = any(m.get('name', '').startswith(self.model_name) for m in models)
                    
                    if not model_exists:
                        print(f"–ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {[m.get('name') for m in models]}")
                        print(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: ollama pull {self.model_name}")
                        raise RuntimeError(f"–ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        
                    print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama!")
                    return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
                    
                print(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                
            except requests.exceptions.RequestException as e:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
            
            if attempt < self.max_retries - 1:
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self.retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(self.retry_delay)
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        error_msg = """
–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
1. Ollama –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ —Ç—Ä–µ–µ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'ollama serve')
2. –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∑–∞–ø—É—Å—Ç–∏—Ç–µ 'ollama pull mistral')
3. –û–∂–∏–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ Ollama
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç 11434 –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""
        print(error_msg)
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
        
    def _create_prompt(self, user_query, context):
        """–°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ Mistral"""
        return f"""<s>[INST] <<SYS>>
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. 
–¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–≤–µ—Ç—É:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
2. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø—Ä–∏–≤–µ–¥–∏ –µ–≥–æ
3. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —É–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
4. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
5. –ë—É–¥—å —Ç–æ—á–µ–Ω –∏ –ª–∞–∫–æ–Ω–∏—á–µ–Ω

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{context}
<</SYS>>

–í–æ–ø—Ä–æ—Å: {user_query}

–î–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ. [/INST]"""

    def generate_response(self, user_query, context):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ Mistral —á–µ—Ä–µ–∑ Ollama"""
        import requests
        import json
        import time
        
        prompt = self._create_prompt(user_query, context)
        
        data = {
            "model": self.model_name,
            "prompt": prompt,
            "stream": False,
            "options": {
                "temperature": 0.7,
                "top_p": 0.9,
                "num_predict": 512
            }
        }
        
        for attempt in range(self.max_retries):
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {self.api_url}/generate")
                print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(data, ensure_ascii=False, indent=2)}")
                
                response = requests.post(
                    f"{self.api_url}/generate",
                    headers=self.headers,
                    json=data,
                    timeout=120  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                )
                
                print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.headers}")
                print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}...")  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
                
                if response.status_code == 200:
                    try:
                        result = response.json()
                        response_text = result.get('response', '').strip()
                        
                        if not response_text:
                            print("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                            
                        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if response_text.startswith(prompt):
                            response_text = response_text[len(prompt):].strip()
                            
                        print(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return response_text
                        
                    except json.JSONDecodeError as e:
                        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}")
                        print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}")
                        raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                        
                else:
                    error_msg = f"–û—à–∏–±–∫–∞ API Ollama: {response.status_code} - {response.text}"
                    print(error_msg)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
                    if attempt < self.max_retries - 1:
                        time.sleep(self.retry_delay)
                        continue
                    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {response.text}")
                    
            except requests.exceptions.RequestException as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
                print(error_msg)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
                if attempt == self.max_retries - 1:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Ollama. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω.")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                time.sleep(self.retry_delay)
                
            except Exception as e:
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                print(error_msg)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
                import traceback
                traceback.print_exc()  # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫—Ç—Ä–µ–π—Å
                
                if attempt == self.max_retries - 1:
                    st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                time.sleep(self.retry_delay)
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

def main():
    setup_ui()
    
    st.title("üí¨ –ß–∞—Ç-–±–æ—Ç —Å RAG")
    st.caption("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if st.sidebar.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é"):
        with st.sidebar.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"):
            search_engine = VectorSearch()
            # –ú–µ—Ç–æ–¥ _check_collection –≤—ã–≤–µ–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
            st.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    search_engine = VectorSearch()
    assistant = OllamaAssistant()

    if query := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å:"):
        with st.chat_message("user"):
            st.write(query)

        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        with st.spinner("üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π..."):
            try:
                context_docs = search_engine.search(query)
                
                if not context_docs:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                    return
                    
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                context_parts = []
                for i, doc in enumerate(context_docs, 1):
                    text = doc.get('text', '')
                    context_parts.append(f"[–ò—Å—Ç–æ—á–Ω–∏–∫ {i}]\n{text}")
                
                context = "\n\n".join(context_parts)
                print(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context[:500]}...")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
                return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        with st.spinner("ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
            try:
                response = assistant.generate_response(query, context)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
                with st.chat_message("assistant", avatar="ü§ñ"):
                    st.write(response)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                with st.expander("üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", expanded=True):
                    if not context_docs:
                        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
                        st.error("""
                        –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                        1. –í –±–∞–∑–µ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É
                        2. –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π
                        3. –ü—Ä–æ–±–ª–µ–º—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
                        """)
                    else:
                        for i, doc in enumerate(context_docs, 1):
                            score = doc.get('score', 'N/A')
                            st.markdown(f"**–ò—Å—Ç–æ—á–Ω–∏–∫ {i}** (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score if isinstance(score, str) else f'{score:.4f}'})")
                            st.text(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {doc.get('metadata', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                            st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:", 
                                      value=doc.get('text', '')[:1000] + ("..." if len(doc.get('text', '')) > 1000 else ""),
                                      height=200,
                                      key=f"doc_{i}")
                            st.write("---")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
                st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Windows
    if sys.platform == "win32":
        import multiprocessing
        multiprocessing.freeze_support()
    
    main()